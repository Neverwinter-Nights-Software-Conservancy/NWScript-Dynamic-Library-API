//::///////////////////////////////////////////////
//:: Dynamic Generic Scripting Library Symbols v1.0
//:: _nw_i0_gener_sym.nss
//:: Copyright (c) 2003 Francois Guimond
//:://////////////////////////////////////////////
/*
    This file contains all the symbols used to
    communicate with dl_o2_coninclude.
*/
//:://////////////////////////////////////////////
//:: Created By: Francois Guimond
//:: Created On: Jan 25, 2003
//:://////////////////////////////////////////////

// library symbol
string SYM_NW_I0_GENERIC = "dl_i0_generic";

// int GetHasEffect(int nEffectType, object oTarget = OBJECT_SELF);
int SYM_GET_HAS_EFFECT = 0x00;
// int GetCharacterLevel(object oTarget);
int SYM_GET_CHARACTER_LEVEL = 0x01;
// int CheckFriendlyFireOnTarget(object oTarget, float fDistance = 5.0);
int SYM_CHECK_FRIENDLY_FIRE_ON_TARGET = 0x02;
// int CheckEnemyGroupingOnTarget(object oTarget, float fDistance = 5.0);
int SYM_CHECK_ENEMY_GROUPING_ON_TARGET = 0x03;
// object FindSingleRangedTarget();
int SYM_FIND_SINGLE_RANGED_TARGET = 0x04;
// int GetNumberOfMeleeAttackers();
int SYM_GET_NUMBER_OF_MELEE_ATTACKERS = 0x05;
// int GetNumberOfRangedAttackers();
int SYM_GET_NUMBER_OF_RANGED_ATTACKERS = 0x06;
// int GetPercentageHPLoss(object oWounded);
int SYM_GET_PERCENTAGE_HP_LOSS = 0x07;
// int GetRacialTypeCount(int nRacial_Type);
int SYM_GET_RACIAL_TYPE_COUNT = 0x08;
// object GetNearestSeenOrHeardEnemy();
int SYM_GET_NEAREST_SEEN_OR_HEARD_ENEMY = 0x09;
// void SetLastGenericSpellCast(int nSpell);
int SYM_SET_LAST_GENERIC_SPELL_CAST = 0x0A;
// int GetLastGenericSpellCast();
int SYM_GET_LAST_GENERIC_SPELL_CAST = 0x0B;
// int CompareLastSpellCast(int nSpell);
int SYM_COMPARE_LAST_SPELL_CAST = 0x0C;
// void RemoveAmbientSleep();
int SYM_REMOVE_AMBIENT_SLEEP = 0x0D;
// int GetIsFighting(object oFighting);
int SYM_GET_IS_FIGHTING = 0x0E;
// object GetLockedObject(object oMaster);
int SYM_GET_LOCKED_OBJECT = 0x0F;
// void EquipAppropriateWeapons(object oTarget);
int SYM_EQUIP_APPROPRIATE_WEAPONS = 0x10;
// void ResetHenchmenState();
int SYM_RESET_HENCHMEN_STATE = 0x11;
// int AssociateCheck(object oCheck);
int SYM_ASSOCIATE_CHECK = 0x12;
// int GetIsPostOrWalking(object oWalker = OBJECT_SELF);
int SYM_GET_IS_POST_OR_WALKING = 0x13;
// void DubugPrintTalentID(talent tTalent);
int SYM_DUBUG_PRINT_TALENT_ID = 0x14;
// void MyPrintString(string sString);
int SYM_MY_PRINT_STRING = 0x15;
// int BashDoorCheck(object oIntruder = OBJECT_INVALID);
int SYM_BASH_DOOR_CHECK = 0x16;
// int DetermineClassToUse();
int SYM_DETERMINE_CLASS_TO_USE = 0x17;
// struct sEnemies DetermineEnemies();
int SYM_DETERMINE_ENEMIES = 0x18;
// string GetMostDangerousClass(struct sEnemies sCount);
int SYM_GET_MOST_DANGEROUS_CLASS = 0x19;
// int GetMatchCompatibility(talent tUse, string sClass, int nType);
int SYM_GET_MATCH_COMPATIBILITY = 0x1A;
// int MatchCombatProtections(talent tUse);
int SYM_MATCH_COMBAT_PROTECTIONS = 0x1B;
// int MatchSpellProtections(talent tUse);
int SYM_MATCH_SPELL_PROTECTIONS = 0x1C;
// int MatchElementalProtections(talent tUse);
int SYM_MATCH_ELEMENTAL_PROTECTIONS = 0x1D;
// talent StartProtectionLoop();
int SYM_START_PROTECTION_LOOP = 0x1E;
// int GetAttackCompatibility(talent tUse, int nClass);
int SYM_GET_ATTACK_COMPATIBILITY = 0x1F;
// int MatchReflexAttacks(talent tUse);
int SYM_MATCH_REFLEX_ATTACKS = 0x20;
// int MatchFortAttacks(talent tUse);
int SYM_MATCH_FORT_ATTACKS = 0x21;
// object GetRangedAttackGroup(int bAllowFriendlyFire = FALSE);
int SYM_GET_RANGED_ATTACK_GROUP = 0x22;
// object GetToughestMeleeAttacker();
int SYM_GET_TOUGHEST_MELEE_ATTACKER = 0x23;
// object GetToughestAttacker();
int SYM_GET_TOUGHEST_ATTACKER = 0x24;
// struct sSpellSelect AnalyzeCombatSituation();
int SYM_ANALYZE_COMBAT_SITUATION = 0x25;
// int GetAlliedHD();
int SYM_GET_ALLIED_HD = 0x26;
// int GetEnemyHD();
int SYM_GET_ENEMY_HD = 0x27;
// talent StartAttackLoop();
int SYM_START_ATTACK_LOOP = 0x28;
// int VerifyDisarm(talent tUse, object oTarget);
int SYM_VERIFY_DISARM = 0x29;
// int VerifyCombatMeleeTalent(talent tUse, object oTarget);
int SYM_VERIFY_COMBAT_MELEE_TALENT = 0x2A;
// int UniversalSpellMatch(talent tUse);
int SYM_UNIVERSAL_SPELL_MATCH = 0x2B;
// int TalentUseProtectionOnSelf();
int SYM_TALENT_USE_PROTECTION_ON_SELF = 0x2C;
// int TalentUseProtectionOthers();
int SYM_TALENT_USE_PROTECTION_OTHERS = 0x2D;
// int TalentEnhanceOthers();
int SYM_TALENT_ENHANCE_OTHERS = 0x2E;
// int TalentUseEnhancementOnSelf();
int SYM_TALENT_USE_ENHANCEMENT_ON_SELF = 0x2F;
// int TalentMeleeAttacked(object oIntruder = OBJECT_INVALID);
int SYM_TALENT_MELEE_ATTACKED = 0x30;
// int TalentRangedAttackers(object oIntruder = OBJECT_INVALID);
int SYM_TALENT_RANGED_ATTACKERS = 0x31;
// int TalentRangedEnemies(object oIntruder = OBJECT_INVALID);
int SYM_TALENT_RANGED_ENEMIES = 0x32;
// int TalentSummonAllies();
int SYM_TALENT_SUMMON_ALLIES = 0x33;
// int TalentHealingSelf();
int SYM_TALENT_HEALING_SELF = 0x34;
// int TalentHeal(int nForce = FALSE);
int SYM_TALENT_HEAL = 0x35;
// int TalentMeleeAttack(object oIntruder = OBJECT_INVALID);
int SYM_TALENT_MELEE_ATTACK = 0x36;
// int TalentSneakAttack();
int SYM_TALENT_SNEAK_ATTACK = 0x37;
// int TalentFlee(object oIntruder = OBJECT_INVALID);
int SYM_TALENT_FLEE = 0x38;
// int TalentUseTurning();
int SYM_TALENT_USE_TURNING = 0x39;
// int TalentPersistentAbilities();
int SYM_TALENT_PERSISTENT_ABILITIES = 0x3A;
// int TalentAdvancedBuff(float fDistance);
int SYM_TALENT_ADVANCED_BUFF = 0x3B;
// int TalentBuffSelf();
int SYM_TALENT_BUFF_SELF = 0x3C;
// int TalentSeeInvisible();
int SYM_TALENT_SEE_INVISIBLE = 0x3D;
// int TalentCureCondition();
int SYM_TALENT_CURE_CONDITION = 0x3E;
// int TalentDragonCombat(object oIntruder = OBJECT_INVALID);
int SYM_TALENT_DRAGON_COMBAT = 0x3F;
// int TalentBardSong();
int SYM_TALENT_BARD_SONG = 0x40;
// int TalentAdvancedProtectSelf();
int SYM_TALENT_ADVANCED_PROTECT_SELF = 0x41;
// int TalentSpellAttack(object oIntruder);
int SYM_TALENT_SPELL_ATTACK = 0x42;
// void DetermineCombatRound(object oIntruder = OBJECT_INVALID, int nAI_Difficulty = 10);
int SYM_DETERMINE_COMBAT_ROUND = 0x43;
// void SetListeningPatterns();
int SYM_SET_LISTENING_PATTERNS = 0x44;
// void RespondToShout(object oShouter, int nShoutIndex, object oIntruder = OBJECT_INVALID);
int SYM_RESPOND_TO_SHOUT = 0x45;
// void RunCircuit(int nTens, int nNum, int nRun = FALSE, float fPause = 1.0);
int SYM_RUN_CIRCUIT = 0x46;
// void WalkWayPoints(int nRun = FALSE, float fPause = 1.0);
int SYM_WALK_WAY_POINTS = 0x47;
// void RunNextCircuit(int nRun = FALSE, float fPause = 1.0);
int SYM_RUN_NEXT_CIRCUIT = 0x48;
// int CheckWayPoints(object oWalker = OBJECT_SELF);
int SYM_CHECK_WAY_POINTS = 0x49;
// void SetNPCWarningStatus(int nStatus = TRUE);
int SYM_SET_NPC_WARNING_STATUS = 0x4A;
// int GetNPCWarningStatus();
int SYM_GET_NPC_WARNING_STATUS = 0x4B;
// void SetSummonHelpIfAttacked();
int SYM_SET_SUMMON_HELP_IF_ATTACKED = 0x4C;
// void CreateSignPostNPC(string sTag, location lLocal);
int SYM_CREATE_SIGN_POST_NPC = 0x4D;
// void ActivateFleeToExit();
int SYM_ACTIVATE_FLEE_TO_EXIT = 0x4E;
// int GetFleeToExit();
int SYM_GET_FLEE_TO_EXIT = 0x4F;
// void SetSpawnInCondition(int nCondition, int bValid = TRUE);
int SYM_SET_SPAWN_IN_CONDITION = 0x50;
// int GetSpawnInCondition(int nCondition);
int SYM_GET_SPAWN_IN_CONDITION = 0x51;
// void SetSpawnInLocals(int nCondition);
int SYM_SET_SPAWN_IN_LOCALS = 0x52;
// void SetAssociateState(int nCondition, int bValid = TRUE);
int SYM_SET_ASSOCIATE_STATE = 0x53;
// int GetAssociateState(int nCondition);
int SYM_GET_ASSOCIATE_STATE = 0x54;
// int GetAssociateCRMax();
int SYM_GET_ASSOCIATE_CR_MAX = 0x55;
// int GetAssociateHealMaster();
int SYM_GET_ASSOCIATE_HEAL_MASTER = 0x56;
// float GetFollowDistance();
int SYM_GET_FOLLOW_DISTANCE = 0x57;
// void CheckIsUnlocked(object oLastObject);
int SYM_CHECK_IS_UNLOCKED = 0x58;
// void SetAssociateStartLocation();
int SYM_SET_ASSOCIATE_START_LOCATION = 0x59;
// location GetAssociateStartLocation();
int SYM_GET_ASSOCIATE_START_LOCATION = 0x5A;
// void PlayMobileAmbientAnimations();
int SYM_PLAY_MOBILE_AMBIENT_ANIMATIONS = 0x5B;
// void PlayImmobileAmbientAnimations();
int SYM_PLAY_IMMOBILE_AMBIENT_ANIMATIONS = 0x5C;
// void SetBehaviorState(int nCondition, int bValid = TRUE);
int SYM_SET_BEHAVIOR_STATE = 0x5D;
// int GetBehaviorState(int nCondition);
int SYM_GET_BEHAVIOR_STATE = 0x5E;
// void DetermineSpecialBehavior(object oIntruder = OBJECT_INVALID);
int SYM_DETERMINE_SPECIAL_BEHAVIOR = 0x5F;

// void ExitAOESpellArea(object oAOEObject);
int SYM_EXIT_AOE_SPELL_AREA = 0x60;

